{"version":3,"sources":["components/aside.js","components/header.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Aside","onclick","className","rel","href","target","Component","Header","Main","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAEqBA,G,6KAEb,OACI,2BAAOC,QAAU,GAAGC,UAAY,QAC5B,uBAAGD,QAAU,GAAGE,IAAM,sBAAsBC,KAAO,kCAAkCC,OAAQ,SAA7F,UACA,uBAAGJ,QAAU,GAAGE,IAAM,sBAAsBC,KAAO,wCAAwCC,OAAS,UAApG,YACA,uBAAGJ,QAAU,GAAGE,IAAM,sBAAsBC,KAAO,uCAAuCC,OAAS,UAAnG,iBACA,uBAAGJ,QAAU,GAAGE,IAAM,sBAAsBC,KAAO,wCAAwCC,OAAS,UAApG,uB,GAPmBC,cCAdC,E,uKAEb,OACI,4BAAQN,QAAU,GAAGC,UAAY,UAC7B,wBAAID,QAAU,IAAd,sB,GAJoBK,aCAfE,E,uKAEb,OACG,0BAAMP,QAAU,GAAGC,UAAY,SAC3B,uBAAGD,QAAU,IAAb,8KAIC,uBAAGA,QAAU,IAAb,qGAGA,uBAAGA,QAAU,IAAb,uHAGA,uBAAGA,QAAU,IAAb,iL,GAdkBK,aCKbG,E,uKAElB,OACC,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAN2BJ,aCKbK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e8ff84e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Aside extends Component {\r\n    render(){\r\n        return (\r\n            <aside onclick = \"\" className = 'menu'>\r\n                <a onclick = \"\" rel = 'noopener noreferrer' href = 'https://github.com/michaelchapa' target ='blank'>GitHub</a>\r\n                <a onclick = \"\" rel = 'noopener noreferrer' href = 'https://linkedin.com/in/michaelchapa1' target = '_blank'>LinkedIn</a>\r\n                <a onclick = \"\" rel = 'noopener noreferrer' href = 'https://soundcloud.com/groove-bodega' target = '_blank'>Groove Bodega</a>\r\n                <a onclick = \"\" rel = 'noopener noreferrer' href = 'https://soundcloud.com/4d69636861656c' target = '_blank'>4d69636861656c</a>\r\n            </aside>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n    render(){\r\n        return (\r\n            <header onclick = \"\" className = 'header'>\r\n                <h1 onclick = \"\">Michael Chapa</h1>\r\n            </header>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Main extends Component {\r\n    render(){\r\n        return (\r\n           <main onclick = \"\" className = 'main '>\r\n               <p onclick = \"\">Engineering a better future by working where my passion lies.\r\n                   Data, Analytics, Visualization, Distributed Computing, Machine Learning, \r\n                   these are a few which come to mind. \r\n                </p>\r\n                <p onclick = \"\">Graduating Fall 2020 from the University of Texas at San Antonio \r\n                    with a B.S. in Computer Science.\r\n                </p>\r\n                <p onclick = \"\">Proud Latino and Texan. I don't think I'll \r\n                    ever leave this place, the food is too good, the people are\r\n                    even better.</p> \r\n                <p onclick = \"\">Chat me up on the following: Tacos Al Pastor, Techno Music\r\n                    Production, Jiu Jitsu, Linux Commands, Stand Up Comedy, \r\n                    Cloud Computing, Ray Bradbury, Cats, Office Supplies. \r\n                </p>\r\n           </main>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Aside from './components/aside'\n// import Footer from './components/footer'\nimport Header from './components/header'\nimport Main from './components/main'\n\nexport default class App extends Component {\n render(){\n   return (\n    <React.Fragment>\n      <Header />\n      <Aside />\n      <Main />\n    </React.Fragment>\n   );\n }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}